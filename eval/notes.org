* Process
  1 Generate a Run Context
    $ gen-context.py -c context.json

  2 Use the context to generate objects
    $ gen-objects.py -c context.json <workdir>

  3 Use the objects and context to generate task
    $ gen-tasks.py -c context.json <workdir>

  4 Filter the task sets
    $ filter-tasks.py <workdir>

  5 Calculate the minumum (exact) number of cores required to meet
    the task's deadline without co-location
    $ opt-task-no-colo.py <workdir>/tasks/<taskfile>

  6 Calculate the minimum (exact) number of cores required to meet
    the task's deadline *with* co-location
    $ opt-task-colo.py <workdir>/tasks/<taskfile>

  7 Calculate the minimum (approximate) number of cores required to
    meet the task's deadline *with* co-location
    $ 3-parm.py <workdir>/tasks/<taskfile>
    Alternatively calculate all in parallel
    $ 3-parm-par.py <workdir>

  8 Calculate the minimum (approximate) number of cores required to
    meet the task's deadline *without* co-location
    $ 2-gram.py <workdir>/tasks/<taskfile>
    Alternatively calculate all in parallel
    $ 2-gram-par.py <workdir>

  9 Use the tasks to generate task sets
    $ gen-task-sets.py -c context.json <workdir>

  10 Determine if the task set is schedulable via <AN ALGORITHM>
     !! NOT IMPLEMENTED !!
     $ sched-test.py -c context.json <workdir>/tasksets/<tasksetfile>

  11 Tabulate the Data
     ./tabulate.py <workdir>

  12 Generate Graphs
     ./graph.py <workdir>

* All Alogrithms Run
  Context: ctxs/all-m5.json
  Context generation command line:

  $ gen-context.py -s 2 -S 4   \
                   -o 2 -O 8   \
		   -b 1 -B 50  \
		   -i 5 -I 45  \
		   -d 1 -D 500 \
		   -r 6 -R 12  \
		   -t 20000

  Annotated Version:
  The beta value is an integer cost, the gamma value is given as a percentage of
  beta. From the command line, a beta of 50 and a gamma of 20 would produce a
  bounding function of the form c(eta) = beta + (beta / 100) * gamma * eta or
  c(eta) = 50 + 10 * gamma

  gen-context.py -s 2 -S 4   \ # 2-4 parallel sections
                 -o 2 -O 8   \ # 2-8 objects per task (not section)
		 -b 1 -B 50  \ # 1-50 beta value of c(eta)
		 -i 5 -I 45  \ # 5-45 percent of Beta for gamma in c(eta)
		 -d 1 -D 500 \ # 1-500 task deadlines
		 -r 6 -R 12  \ # 6-12 threads per parallel section
		 -t 50000    \ # 50,000 tasks


  Command line invocation:
  ./go.sh -M 5 -U 100 ctxs/all-M5.json all-m5-output

  Annotated Version:
  ./go.sh -M 5             \ # Maximum number of cores 5
          -U 100           \ # Attempt to sample tasks to create equal buckets
	                   \ # of size 100 according to cache re-use factor
	  ctxs/all-M5.json \ # context file
	  all-m5-output    \ # output directory


  Timing Information:
  Wall time - 310 minutes
  Compute time - 2200 minutes

* Approximation Algorithms
  Context: ctxs/approx-m128.json
  Context generation command line:

  $ gen-context.py -s 2  -s 8    \
                   -o 2  -O 16   \
		   -b 20 -B 50   \
		   -i 15 -I 85   \
		   -d 200 -D 500 \
		   -r 32 -R 64  \
		   -t 50000


* Contexts
** ctxs/rep-objs.ctx
Task set generation for the representative objects

** ctxs/mrtc-straw-man.ctx
MRTC task set generation
